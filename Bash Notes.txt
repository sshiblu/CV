alt and f2 = new terminal
pwd = what folder we are in
ls = all the folders in the directory
cd = change directory
/ is root
~ (tilda) = homefolder 
unix is case sensitive
ls (-)l= flag used to modify the way a command works
-l= shows more information on the files using the flag 
ls -a = a flag stands for all means show everything in the folder include hidden files
combine flags like -al = show more information of folders hidden and unhidden
man = manual on command, its an independent program not a command or google man page
absolute or relative path long or short
cd .. = next folder up
. = current folder
cp = copy file, first bit you want to copy then new name, copy and paste
if you dont provide a new name but new location with new name
if new location which doesnt exist renames it to the new location name, make sure location exists
mv = moves folder to new location, cut and paste 
rm = removes file
rm -r = recurse over stuff inside and delete all of them
rm -fr= recurse and force deletion of stuff inside
touch = after command space then creates file with name you give
mkdir = creates a new directory in the folder you are in
echo = spits string it back at you
(pipe) > = it takes the output of whatever you put before and then stores it in a file at that location
echo "hello" > my file = stores string in that file
File extensions dont mean shizzle to unix!
Dont learn vim now but do it later
cat = just prints out content to the command line
$home = variable 
cd "heelo i" = creates folders with spaces
cd heelo\ i = changes to the folder need to slash because of folder
touch one two three = creates 3 files
mv folder2/my_pathtxct folder2/my_path.txt use mv to rename


Globbing basically using wildcards
ls -l *.txt = looks for anything .txt
ls f*f= looks for stuff starting and ending with an f
mv folder2/*.txt ~ = move all text files in folder 2 and store in root

Soft keys equal shortcuts
ln -s project/folder2/my_path.txt . = link symbols so creates link to current directory

whoami = tells you which user you are currently logged in as 
groups = the groups you are in
chown = change ownership
r = read
w = write
x = execute
-rw- ,so cant be executed as x is not there


Simple file permissions
chmod o-r three , takes away the right to read on file three
chmod u+x three, enables the user to execute the file
chmod uog+rwx three, enables everything
chmod 777 four, enables everything

u = user
g = group

su = puts you into a new shell as a root user, dont do it
exit = to log out

Sudo, executes as root

sudo touch /fooo = creates file in root using roots permission

ssh 'host name or ip address' = puts you in a remote secure server
putty for windows

.files, hidden files ussually live in your home directory also are configuration files
pink colour files means links or shortcuts

rm-1 = asks you are ycd u sure you want to delete it using flag

-----------------------------------------------------------------------------------

Commiting is a two stage process

git add
git commit

Configure git:

Use this command: $ git config --global user.name "Shorof Shiblu"

Set email $ git config --global user.email shorof.uddin22@gmail.com

color ui = true 
make the color log come true

git init , makes my folder into a git repository, only need to use it once
dont make it in a stupid place. Make sure its in the correct depository. 
Delete .git file is you dont want to make it a repository. 

git add . , add everything in the current directory can add only one folder
git status, tells us where we are at
git commit -m "created hello text file", why we changed it 

git diff, can only show the difference between the previous commit and 
the files that is knows about

git status (use), the changes to be commited

git diff --staged, shows the difference and its stages

git log, shows you the log with a commit like a barcode

git log --oneline, shows the reason and part of the commit

git log --online --graph, shows branches

git log --online --graph --decorate, shows branches and decorates

git checkout . (ctrl z), discard change in working directory back to our last
commit

git remote add origin https://github.com/sshiblu/myproject, after making 
new repository make sure it has the same name

git push -u origin master, -u, sets the remote as origin and branch as 
master as standard
git reset --hard HEAD^, rolls us back to the previous commit 
and all the changes are lost
git reset --soft HEAD^, rolls us back to the previous commit, all the changes
are kept because of the soft
or git reset --soft HEAD~4, rolls us back to the fourth commit back
touch

git commit --ammend -m "Added new files 1 and 2", it will overwrite the message

All local for now
--------------------------------------------------------------------------------
shift + ins , in windows to paste
clone . . . go to git hub find the url of the project then
git clone https://github.com/dannysmith/guard-shopifythem.gitls
clone, brings down the files
git diff f7757fd b734eaa, find the difference using the char # 

#, in bash is comments

git push, push stuff up to some sort of remote

git remote -v, first bit is the name of the remote, second bit is the server
the end point

its just convention to say origin

git push origin master, push up to the remote origin and the branch is master

